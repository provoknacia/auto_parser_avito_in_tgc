import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
import aiohttp
from bs4 import BeautifulSoup
import re
import json
from datetime import datetime, time
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏ —É @BotFather)
BOT_TOKEN = ""

# ID —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞
CHANNEL_ID = 

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ê–≤–∏—Ç–æ
HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
sent_ads = {}
send_to_channel = False
channel_configured = False

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduled_tasks = {}
search_query_schedule = None
schedule_times = []
schedule_running = False

async def parse_avito(search_query, max_results=5):
    """
    –ü–∞—Ä—Å–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ê–≤–∏—Ç–æ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    """
    base_url = "https://www.avito.ru"
    search_url = f"{base_url}/rossiya?q={search_query}"
    
    results = []
    
    try:
        async with aiohttp.ClientSession(headers=HEADERS) as session:
            async with session.get(search_url) as response:
                if response.status == 200:
                    html = await response.text()
                    soup = BeautifulSoup(html, 'html.parser')
                    
                    # –ü–æ–∏—Å–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
                    items = soup.find_all('div', {'data-marker': 'item'})[:max_results]
                    
                    for item in items:
                        try:
                            # –ù–∞–∑–≤–∞–Ω–∏–µ
                            title_elem = item.find('h3', {'itemprop': 'name'})
                            title = title_elem.text.strip() if title_elem else '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ'
                            
                            # –¶–µ–Ω–∞
                            price_elem = item.find('span', {'itemprop': 'price'})
                            price = price_elem.get('content') if price_elem else '–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'
                            if price_elem and not price:
                                price = price_elem.text.strip()
                            
                            # –û–ø–∏—Å–∞–Ω–∏–µ
                            desc_elem = item.find('div', class_=re.compile(r'description'))
                            description = desc_elem.text.strip() if desc_elem else '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
                            
                            # –°—Å—ã–ª–∫–∞
                            link_elem = item.find('a', {'data-marker': 'item-title'})
                            link = base_url + link_elem.get('href') if link_elem else '–°—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
                            
                            # –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
                            location_elem = item.find('div', class_=re.compile(r'geo'))
                            location = location_elem.text.strip() if location_elem else '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
                            
                            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            images = []
                            
                            # –°–ø–æ—Å–æ–± 1: –ü–æ–∏—Å–∫ –≤ data-marker
                            image_elems = item.find_all('img')
                            for img in image_elems:
                                src = img.get('src') or img.get('data-src')
                                if src and 'http' in src and not src.endswith('.gif'):
                                    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞–ª–µ–Ω—å–∫–∏—Ö –ø—Ä–µ–≤—å—é –≤ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                                    if '64x48' in src:
                                        src = src.replace('64x48', '640x480')
                                    elif '50x37' in src:
                                        src = src.replace('50x37', '500x375')
                                    images.append(src)
                            
                            # –°–ø–æ—Å–æ–± 2: –ü–æ–∏—Å–∫ –≤ JSON –¥–∞–Ω–Ω—ã—Ö
                            script_data = item.find('script', type='application/ld+json')
                            if script_data:
                                try:
                                    json_data = json.loads(script_data.string)
                                    if isinstance(json_data, list):
                                        json_data = json_data[0]
                                    if 'image' in json_data:
                                        if isinstance(json_data['image'], str):
                                            images.append(json_data['image'])
                                        elif isinstance(json_data['image'], list):
                                            images.extend(json_data['image'][:3])
                                except:
                                    pass
                            
                            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                            images = list(dict.fromkeys(images))[:3]
                            
                            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                            ad_id = hash(link)
                            
                            results.append({
                                'id': ad_id,
                                'title': title,
                                'price': price,
                                'description': description[:200] + '...' if len(description) > 200 else description,
                                'link': link,
                                'location': location,
                                'images': images
                            })
                            
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —ç–ª–µ–º–µ–Ω—Ç–∞: {e}")
                            continue
                            
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ HTTP: {response.status}")
                    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ê–≤–∏—Ç–æ: {e}")
    
    return results

async def send_ad_to_channel(ad_data):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª
    """
    global CHANNEL_ID
    
    if not CHANNEL_ID:
        return False
        
    try:
        result_text = f"""
üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {ad_data['title']}
üí∞ <b>–¶–µ–Ω–∞:</b> {ad_data['price']}
üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {ad_data['location']}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {ad_data['description']}
üîó <a href="{ad_data['link']}">–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>

#–æ–±—ä—è–≤–ª–µ–Ω–∏–µ #avito
        """
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
        if ad_data['images']:
            try:
                # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
                media = []
                for j, image_url in enumerate(ad_data['images'][:3]):
                    if j == 0:
                        media.append(types.InputMediaPhoto(
                            media=image_url,
                            caption=result_text,
                            parse_mode='HTML'
                        ))
                    else:
                        media.append(types.InputMediaPhoto(media=image_url))
                
                await bot.send_media_group(chat_id=CHANNEL_ID, media=media)
                logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª: {ad_data['title']}")
                return True
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª: {e}")
                await bot.send_message(
                    chat_id=CHANNEL_ID, 
                    text=result_text, 
                    parse_mode='HTML', 
                    disable_web_page_preview=False
                )
                return True
        else:
            await bot.send_message(
                chat_id=CHANNEL_ID, 
                text=result_text, 
                parse_mode='HTML', 
                disable_web_page_preview=False
            )
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª: {ad_data['title']}")
            return True
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª: {e}")
        return False

async def check_channel_permissions():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
    """
    global CHANNEL_ID, channel_configured
    
    if not CHANNEL_ID:
        return False
        
    try:
        chat_member = await bot.get_chat_member(CHANNEL_ID, (await bot.get_me()).id)
        if chat_member.status in ['administrator', 'creator']:
            channel_configured = True
            return True
        else:
            logger.error(f"–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞ {CHANNEL_ID}!")
            return False
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ: {e}")
        return False

async def send_scheduled_ad(ad_index, total_ads, target_time):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    """
    global search_query_schedule, sent_ads
    
    try:
        # –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        results = await parse_avito(search_query_schedule, max_results=total_ads)
        
        if results and ad_index < len(results):
            ad = results[ad_index]
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
            if ad['id'] not in sent_ads:
                success = await send_ad_to_channel(ad)
                if success:
                    sent_ads[ad['id']] = True
                    logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {ad_index + 1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –≤ {target_time}: {ad['title']}")
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–°
                    admin_id = 123456789  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
                    await bot.send_message(
                        admin_id,
                        f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ {ad_index + 1} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {target_time}\n"
                        f"üè∑Ô∏è {ad['title']}\n"
                        f"üí∞ {ad['price']}"
                    )
            else:
                logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {ad_index + 1} —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")
                
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {ad_index + 1} –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: {e}")

async def schedule_daily_tasks():
    """
    –°–æ–∑–¥–∞–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    """
    global schedule_times, scheduled_tasks
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–¥–∞—á–∏
    await stop_scheduled_tasks()
    
    for i, schedule_time in enumerate(schedule_times):
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        task = asyncio.create_task(schedule_ad_task(i, schedule_time))
        scheduled_tasks[i] = task
        logger.info(f"–ó–∞–¥–∞—á–∞ {i+1} —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ {schedule_time}")

async def schedule_ad_task(ad_index, target_time_str):
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    """
    while schedule_running:
        try:
            now = datetime.now(pytz.timezone('Europe/Moscow'))
            target_time = datetime.strptime(target_time_str, '%H:%M').time()
            
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–µ–≥–æ–¥–Ω—è —Å —Ü–µ–ª–µ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
            target_datetime = datetime.combine(now.date(), target_time)
            target_datetime = pytz.timezone('Europe/Moscow').localize(target_datetime)
            
            # –ï—Å–ª–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ —Å–µ–≥–æ–¥–Ω—è, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            if now > target_datetime:
                target_datetime += timedelta(days=1)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            wait_seconds = (target_datetime - now).total_seconds()
            
            if wait_seconds > 0:
                logger.info(f"–û–∂–∏–¥–∞–Ω–∏–µ {wait_seconds} —Å–µ–∫—É–Ω–¥ –¥–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {ad_index + 1} –≤ {target_time_str}")
                await asyncio.sleep(wait_seconds)
                
                if schedule_running:
                    await send_scheduled_ad(ad_index, len(schedule_times), target_time_str)
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
            await asyncio.sleep(60)

async def stop_scheduled_tasks():
    """
    –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
    """
    global scheduled_tasks, schedule_running
    
    schedule_running = False
    
    for task_id, task in scheduled_tasks.items():
        task.cancel()
        try:
            await task
        except asyncio.CancelledError:
            pass
    
    scheduled_tasks.clear()
    logger.info("–í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    welcome_text = """
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ê–≤–∏—Ç–æ.

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
‚Ä¢ "iPhone 13"
‚Ä¢ "–∫–≤–∞—Ä—Ç–∏—Ä–∞ –ú–æ—Å–∫–≤–∞"
‚Ä¢ "–∞–≤—Ç–æ–º–æ–±–∏–ª—å –±/—É"

–Ø –Ω–∞–π–¥—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ –ø–æ–∫–∞–∂—É —Ç–µ–±–µ!

üì¢ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:
/set_channel - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª
/add_to_channel - –≤–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
/stop_channel - –≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
/channel_status - —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞

‚è∞ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:
/set_schedule - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
/start_schedule - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/stop_schedule - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/schedule_status - —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    """
    await message.answer(welcome_text)

@dp.message(Command("set_schedule"))
async def cmd_set_schedule(message: Message):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    """
    global search_query_schedule, schedule_times
    
    if len(message.text.split()) < 2:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –∏ –≤—Ä–µ–º–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/set_schedule '–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å' –≤—Ä–µ–º—è1 –≤—Ä–µ–º—è2 ...\n\n"
            "–ü—Ä–∏–º–µ—Ä:\n"
            "/set_schedule 'iPhone 13' 09:00 12:00 15:00 18:00 21:00\n\n"
            "‚è∞ –£–∫–∞–∂–∏—Ç–µ 5 –≤—Ä–µ–º–µ–Ω –¥–ª—è 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú)"
        )
        return
    
    parts = message.text.split()
    if len(parts) < 7:  # –∫–æ–º–∞–Ω–¥–∞ + –∑–∞–ø—Ä–æ—Å + 5 –≤—Ä–µ–º–µ–Ω
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ 5 –≤—Ä–µ–º–µ–Ω –¥–ª—è 5 –æ–±—ä—è–≤–ª–µ–Ω–∏–π!")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã)
    query_parts = parts[1:-5]
    search_query_schedule = ' '.join(query_parts)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–∞
    schedule_times = parts[-5:]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω
    valid_times = []
    for time_str in schedule_times:
        try:
            datetime.strptime(time_str, '%H:%M')
            valid_times.append(time_str)
        except ValueError:
            await message.answer(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {time_str}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú")
            return
    
    if len(valid_times) != 5:
        await message.answer("‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å 5 –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω!")
        return
    
    schedule_times = valid_times
    
    await message.answer(
        f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
        f"üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {search_query_schedule}\n"
        f"‚è∞ –í—Ä–µ–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:\n"
        f"1. {schedule_times[0]} - –û–±—ä—è–≤–ª–µ–Ω–∏–µ 1\n"
        f"2. {schedule_times[1]} - –û–±—ä—è–≤–ª–µ–Ω–∏–µ 2\n"
        f"3. {schedule_times[2]} - –û–±—ä—è–≤–ª–µ–Ω–∏–µ 3\n"
        f"4. {schedule_times[3]} - –û–±—ä—è–≤–ª–µ–Ω–∏–µ 4\n"
        f"5. {schedule_times[4]} - –û–±—ä—è–≤–ª–µ–Ω–∏–µ 5\n\n"
        f"–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_schedule"
    )

@dp.message(Command("start_schedule"))
async def cmd_start_schedule(message: Message):
    """
    –ó–∞–ø—É—Å–∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    """
    global schedule_running, search_query_schedule, schedule_times
    
    if not search_query_schedule or not schedule_times:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /set_schedule")
        return
    
    if not channel_configured:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π /set_channel")
        return
    
    schedule_running = True
    await schedule_daily_tasks()
    
    await message.answer(
        f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!\n\n"
        f"üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {search_query_schedule}\n"
        f"‚è∞ –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é:\n"
        + "\n".join([f"{i+1}. {time} - –û–±—ä—è–≤–ª–µ–Ω–∏–µ {i+1}" for i, time in enumerate(schedule_times)])
    )

@dp.message(Command("stop_schedule"))
async def cmd_stop_schedule(message: Message):
    """
    –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    """
    global schedule_running
    
    await stop_scheduled_tasks()
    await message.answer("‚èπÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

@dp.message(Command("schedule_status"))
async def cmd_schedule_status(message: Message):
    """
    –°—Ç–∞—Ç—É—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    """
    global schedule_running, search_query_schedule, schedule_times
    
    status_text = "üìä –°—Ç–∞—Ç—É—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:\n\n"
    
    if schedule_running:
        status_text += "üü¢ –°—Ç–∞—Ç—É—Å: –ó–∞–ø—É—â–µ–Ω–æ\n"
    else:
        status_text += "üî¥ –°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n"
    
    if search_query_schedule:
        status_text += f"üîç –ó–∞–ø—Ä–æ—Å: {search_query_schedule}\n"
    else:
        status_text += "üîç –ó–∞–ø—Ä–æ—Å: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
    
    if schedule_times:
        status_text += "‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n"
        for i, time in enumerate(schedule_times):
            status_text += f"{i+1}. {time} - –û–±—ä—è–≤–ª–µ–Ω–∏–µ {i+1}\n"
    else:
        status_text += "‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n"
    
    await message.answer(status_text)

# ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (set_channel, channel_status, add_to_channel, stop_channel, help) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

@dp.message(Command("set_channel"))
async def cmd_set_channel(message: Message):
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–∞
    """
    global CHANNEL_ID
    
    if len(message.text.split()) < 2:
        await message.answer(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/set_channel @username_–∫–∞–Ω–∞–ª–∞\n"
            "–∏–ª–∏\n"
            "/set_channel -1001234567890\n\n"
            "üìù –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞:\n"
            "1. –î–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: @username\n"
            "2. –î–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞: –¥–æ–±–∞–≤—å—Ç–µ @username_to_id_bot –≤ –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏—Ç–µ —Ü–∏—Ñ—Ä–æ–≤–æ–π ID"
        )
        return
    
    channel_id = message.text.split()[1].strip()
    CHANNEL_ID = channel_id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if await check_channel_permissions():
        await message.answer(f"‚úÖ –ö–∞–Ω–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {CHANNEL_ID}\n–ë–æ—Ç –∏–º–µ–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞!")
    else:
        await message.answer(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª {CHANNEL_ID}\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n"
            "1. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä\n"
            "2. –£ –±–æ—Ç–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "3. ID –∫–∞–Ω–∞–ª–∞ —É–∫–∞–∑–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
        )

@dp.message(Command("channel_status"))
async def cmd_channel_status(message: Message):
    """
    –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞
    """
    global CHANNEL_ID, send_to_channel, channel_configured
    
    status_text = f"""
üìä –°—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞:

üÜî ID –∫–∞–Ω–∞–ª–∞: {CHANNEL_ID or '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω: {'‚úÖ –î–∞' if channel_configured else '‚ùå –ù–µ—Ç'}
üì§ –û—Ç–ø—Ä–∞–≤–∫–∞: {'‚úÖ –í–∫–ª—é—á–µ–Ω–∞' if send_to_channel else '‚ùå –í—ã–∫–ª—é—á–µ–Ω–∞'}
    """
    
    await message.answer(status_text)

@dp.message(Command("add_to_channel"))
async def cmd_add_to_channel(message: Message):
    """
    –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª
    """
    global send_to_channel, channel_configured
    
    if not CHANNEL_ID or not channel_configured:
        await message.answer(
            "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥–æ–π /set_channel\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!"
        )
        return
    
    send_to_channel = True
    await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª –≤–∫–ª—é—á–µ–Ω–∞!")

@dp.message(Command("stop_channel"))
async def cmd_stop_channel(message: Message):
    """
    –í—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª
    """
    global send_to_channel
    send_to_channel = False
    await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª –≤—ã–∫–ª—é—á–µ–Ω–∞!")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    help_text = """
üìã –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏
2. –Ø –ø–æ–∏—â—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ –ê–≤–∏—Ç–æ
3. –ü–æ–∫–∞–∂—É —Ç–µ–±–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏

–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
‚Ä¢ "–Ω–æ—É—Ç–±—É–∫ asus"
‚Ä¢ "—Ä–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"
‚Ä¢ "–¥–∏–≤–∞–Ω"

üì¢ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–Ω–∞–ª–æ–º:
/set_channel - –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–Ω–∞–ª
/add_to_channel - –≤–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –∫–∞–Ω–∞–ª
/stop_channel - –≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –∫–∞–Ω–∞–ª
/channel_status - —Å—Ç–∞—Ç—É—Å –∫–∞–Ω–∞–ª–∞

‚è∞ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:
/set_schedule - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
/start_schedule - –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ  
/stop_schedule - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
/schedule_status - —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è

‚ö†Ô∏è –ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
    """
    await message.answer(help_text)

@dp.message()
async def handle_search(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    search_query = message.text.strip()
    
    if not search_query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    wait_msg = await message.answer(f"üîç –ò—â—É –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É: '{search_query}'...")
    
    try:
        # –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        results = await parse_avito(search_query, max_results=5)
        
        if not results:
            await message.answer("‚ùå –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        sent_to_channel_count = 0
        for i, item in enumerate(results, 1):
            result_text = f"""
üìã –û–±—ä—è–≤–ª–µ–Ω–∏–µ {i}:

üè∑Ô∏è <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {item['title']}
üí∞ <b>–¶–µ–Ω–∞:</b> {item['price']}
üìç <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {item['location']}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {item['description']}
üîó <a href="{item['link']}">–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ</a>
            """
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if item['images']:
                try:
                    media = []
                    for j, image_url in enumerate(item['images'][:3]):
                        if j == 0:
                            media.append(types.InputMediaPhoto(
                                media=image_url,
                                caption=result_text,
                                parse_mode='HTML'
                            ))
                        else:
                            media.append(types.InputMediaPhoto(media=image_url))
                    
                    await message.answer_media_group(media=media)
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
                    await message.answer(result_text, parse_mode='HTML', disable_web_page_preview=True)
            else:
                await message.answer(result_text, parse_mode='HTML', disable_web_page_preview=True)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
            if send_to_channel and channel_configured:
                if item['id'] not in sent_ads:
                    success = await send_ad_to_channel(item)
                    if success:
                        sent_ads[item['id']] = True
                        sent_to_channel_count += 1
                        logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª: {item['title']}")
            
            await asyncio.sleep(1)
        
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        channel_info = ""
        if send_to_channel and channel_configured:
            channel_info = f"\nüì¢ –í –∫–∞–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_to_channel_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
        elif send_to_channel and not channel_configured:
            channel_info = "\n‚ùå –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /set_channel)"
        
        await message.answer(
            f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π.{channel_info}\n"
            f"–î–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å!"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ–∂–∏–¥–∞–Ω–∏–∏
    await bot.delete_message(chat_id=message.chat.id, message_id=wait_msg.message_id)

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    """
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
    if CHANNEL_ID:
        await check_channel_permissions()
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
